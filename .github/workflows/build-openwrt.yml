#
# 这是你的工作流文件的名字，会显示在 Actions 页面
#
name: 构建 OpenWrt 固件

#
# 规定这个工作流在什么情况下会被触发
#
on:
  # 1. 允许你在 Actions 页面手动点击 "Run workflow" 按钮来运行
  workflow_dispatch:
    inputs:
      ssh:
        description: '是否启用 SSH 连接到 Actions 虚拟机 (方便调试)'
        required: false
        default: 'false'

  # 2. (可选) 当你往主分支 (master 或 main) 推送代码时自动触发
  # push:
  #  branches:
  #    - master

#
# 工作流包含的任务 (jobs)
#
jobs:
  # 我们定义一个名叫 "build" 的任务
  build:
    # 这个任务运行在 GitHub 提供的最新版 Ubuntu 虚拟机上
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 第一步：检出你的代码
      # actions/checkout@v3 是一个官方维护的 action, 用来拉取你的仓库代码到虚拟机里
      - name: 检出代码
        uses: actions/checkout@v3

      # 第二步：安装编译所需要的依赖环境
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync \
          unzip zlib1g-dev file wget

      # 第三步：更新并安装 OpenWrt 的 Feeds (扩展软件包)
      - name: 更新与安装 Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 第四步：拷贝你的自定义配置
      # 这会把你仓库根目录的 .config 文件拷贝到正确的位置
      - name: 拷贝编译配置
        run: |
          # 如果你的配置文件叫别的名字，比如 a.config, 就改成 cp a.config .config
          cp .config .config
          
      # 第五步：生成最终 .config 文件 (非常重要！)
      - name: 生成最终 .config
        run: make defconfig

      # 第六步：下载编译所需的软件包源码
      - name: 下载软件包
        run: make download -j$(nproc)

      # 第七步：开始编译固件
      # -j$(nproc) 代表使用所有CPU核心来加速编译
      # V=s 会输出详细的编译日志，方便排查错误
      - name: 编译固件
        run: make -j$(nproc) V=s

      # (可选) 如果编译过程中需要 SSH 登录虚拟机进行调试，取消下面这部分的注释
      # - name: SSH 连接到虚拟机
      #  uses: mxschmitt/action-tmate@v3
      #  if: ${{ github.event.inputs.ssh == 'true' }}

      # 第八步：整理并上传固件
      # 编译好的固件会放在 bin/targets 目录里
      - name: 上传固件到 Artifacts
        uses: actions/upload-artifact@v3
        with:
          # 这个名字会显示在 Actions 页面的产物区域
          name: OpenWrt_Firmware
          # 这是要上传的文件的路径，* 是通配符，能匹配所有文件
          path: bin/targets/*/*/*.*

